{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I2PgkvDOlHpi",
        "outputId": "8cbd73bb-d67f-424b-ad1e-208b0c5fb950"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "Матрица 3x4:\n",
            "[[ 1  2  3  4]\n",
            " [ 5  6  7  8]\n",
            " [ 9 10 11 12]]\n",
            "\n",
            "\n",
            "Матрица 4x3:\n",
            "[[13 14 15]\n",
            " [16 17 18]\n",
            " [19 20 21]\n",
            " [22 23 24]]\n",
            "\n",
            "\n",
            "Матрица 3x3, полученная в результате скалярного умножения исходных:\n",
            "[[190 200 210]\n",
            " [470 496 522]\n",
            " [750 792 834]]\n",
            "Сумма элементов матрицы: 4464\n",
            "Число элементов матрицы: 9\n",
            "Среднее значение элементов матрицы: 496.0\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "# ЗАДАНИЕ 1\n",
        "# Создаем вектор от 1 до 24\n",
        "my_vector = np.arange(1, 25)\n",
        "\n",
        "# Создаем матрицу 3x4 из первых 12 элементов вектора\n",
        "matrix_a = my_vector[:12].reshape(3, 4)\n",
        "print(\"\\n\\nМатрица 3x4:\")\n",
        "print(matrix_a)\n",
        "\n",
        "# Создаем матрицу 4x3 из оставшихся элементов вектора\n",
        "matrix_b = my_vector[12:].reshape(4, 3)\n",
        "print(\"\\n\\nМатрица 4x3:\")\n",
        "print(matrix_b)\n",
        "\n",
        "# Выполняем скалярное умножение матриц\n",
        "matrix_mult = np.dot(matrix_a, matrix_b)\n",
        "print(\"\\n\\nМатрица 3x3, полученная в результате скалярного умножения исходных:\")\n",
        "print(matrix_mult)\n",
        "\n",
        "# Вычисляем сумму, количество элементов и среднее значение матрицы\n",
        "sum_matrix = np.sum(matrix_mult)\n",
        "size_matrix = matrix_mult.size\n",
        "average_matrix = sum_matrix / size_matrix\n",
        "print(f\"Сумма элементов матрицы: {sum_matrix}\")\n",
        "print(f\"Число элементов матрицы: {size_matrix}\")\n",
        "print(f\"Среднее значение элементов матрицы: {average_matrix}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ЗАДАНИЕ 2\n",
        "import numpy as np\n",
        "\n",
        "# Создаем вектор от 1 до 18\n",
        "vector_entire = np.arange(1, 19)\n",
        "\n",
        "# Создаем первую матрицу 3x3 из первых 9 элементов вектора\n",
        "matrix3x3_1 = vector_entire[:9].reshape(3, 3)\n",
        "print(\"\\n\\nМатрица matrix3x3_1:\")\n",
        "print(matrix3x3_1)\n",
        "\n",
        "# Создаем вторую матрицу 3x3 из оставшихся элементов вектора\n",
        "matrix3x3_2 = vector_entire[9:].reshape(3, 3)\n",
        "print(\"\\n\\nМатрица matrix3x3_2:\")\n",
        "print(matrix3x3_2)\n",
        "\n",
        "# Выполняем поэлементное умножение матриц\n",
        "mult_el = np.multiply(matrix3x3_1, matrix3x3_2)\n",
        "print(\"\\n\\nМатрица 3x3, полученная в результате поэлементного умножения исходных:\")\n",
        "print(mult_el)\n",
        "\n",
        "# Вычисляем сумму, количество элементов и среднее значение поэлементно умноженной матрицы\n",
        "sum_matrix2 = np.sum(mult_el)\n",
        "size_matrix2 = mult_el.size\n",
        "avg2 = sum_matrix2 / size_matrix2\n",
        "print(f\"Сумма элементов матрицы: {sum_matrix2}\")\n",
        "print(f\"Число элементов матрицы: {size_matrix2}\")\n",
        "print(f\"Среднее значение элементов матрицы: {avg2}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4kt1nDErl7Qt",
        "outputId": "9886da0b-b9c2-4be7-df45-8a7523b9fd24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "Матрица matrix3x3_1:\n",
            "[[1 2 3]\n",
            " [4 5 6]\n",
            " [7 8 9]]\n",
            "\n",
            "\n",
            "Матрица matrix3x3_2:\n",
            "[[10 11 12]\n",
            " [13 14 15]\n",
            " [16 17 18]]\n",
            "\n",
            "\n",
            "Матрица 3x3, полученная в результате поэлементного умножения исходных:\n",
            "[[ 10  22  36]\n",
            " [ 52  70  90]\n",
            " [112 136 162]]\n",
            "Сумма элементов матрицы: 690\n",
            "Число элементов матрицы: 9\n",
            "Среднее значение элементов матрицы: 76.66666666666667\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ЗАДАНИЕ 3\n",
        "import numpy as np\n",
        "\n",
        "# Задаем матрицу A и вектор B\n",
        "A = np.array([[2, 3, -1], [5, 2, 3], [6, -5, -4]])\n",
        "B = np.array([-3, 9, 3])\n",
        "\n",
        "# Вычисляем определитель матрицы A\n",
        "d = np.linalg.det(A)\n",
        "print(f\"Определитель дельта: {d}\")\n",
        "\n",
        "# Создаем матрицу x, заменяя первый столбец матрицы A на вектор B\n",
        "x = A.copy()\n",
        "x[:, 0] = B\n",
        "x_d = np.linalg.det(x)\n",
        "print(f\"Определитель дельта-x: {x_d}\")\n",
        "\n",
        "# Создаем матрицу y, заменяя второй столбец матрицы A на вектор B\n",
        "y = A.copy()\n",
        "y[:, 1] = B\n",
        "y_d = np.linalg.det(y)\n",
        "print(f\"Определитель дельта-y: {y_d}\")\n",
        "\n",
        "# Создаем матрицу z, заменяя третий столбец матрицы A на вектор B\n",
        "z = A.copy()\n",
        "z[:, 2] = B\n",
        "z_d = np.linalg.det(z)\n",
        "print(f\"Определитель дельта-z: {z_d}\")\n",
        "\n",
        "# Вычисляем значения x, y, z\n",
        "x_result = x_d / d\n",
        "y_result = y_d / d\n",
        "z_result = z_d / d\n",
        "print(f\"Решение системы уравнений: x = {x_result}, y = {y_result}, z = {z_result}\")\n",
        "#Проверка\n",
        "solve = np.linalg.solve(A, B)\n",
        "solve\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fn4Kuv_8mYYr",
        "outputId": "1d6cdf9a-bf42-47d2-8a3c-ceebc60288e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Определитель дельта: 164.99999999999994\n",
            "Определитель дельта-x: 165.00000000000009\n",
            "Определитель дельта-y: -164.99999999999994\n",
            "Определитель дельта-z: 329.99999999999994\n",
            "Решение системы уравнений: x = 1.0000000000000009, y = -1.0, z = 2.0000000000000004\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 1., -1.,  2.])"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "byNGPYjN150l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#ЗАДАНИЕ4\n",
        "import numpy as np\n",
        "\n",
        "# Задаем массив данных\n",
        "my_data = np.array([14, 18, 21, 25, 29, 33, 37, 41])\n",
        "\n",
        "# Вычисляем третий квартиль (75-й процентиль) для массива данных\n",
        "quartile_3 = np.percentile(my_data, 75)\n",
        "print(f\"Третий квартиль (75-й процентиль) массива данных: {quartile_3}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jDjtm2KHnpf7",
        "outputId": "f9fe1b28-876b-42bc-be93-029e07234629"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Третий квартиль (75-й процентиль) массива данных: 34.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ЗАДАНИЕ 6\n",
        "import pandas as pd\n",
        "\n",
        "# Создаем словарь с данными о сотрудниках\n",
        "employee_data = {\n",
        "    \"Имя\": [\"Анна\", \"Петр\", \"Мария\", \"Иван\"],\n",
        "    \"Возраст\": [25, 32, 28, 22],\n",
        "    \"Зарплата\": [50000, 60000, 45000, 55000]\n",
        "}\n",
        "\n",
        "# Создаем DataFrame на основе словаря\n",
        "df_employee = pd.DataFrame(employee_data)\n",
        "print(df_employee)\n",
        "\n",
        "# Вычисляем среднюю зарплату среди сотрудников младше 30 лет\n",
        "avg_salary_less_30 = df_employee[df_employee[\"Возраст\"] < 30][\"Зарплата\"].mean()\n",
        "print(f\"\\n\\nСредняя зарплата среди сотрудников младше 30 лет: {avg_salary_less_30}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kG1V2k-2oWAe",
        "outputId": "8f787f11-83f7-463e-8847-07b22cdfec26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     Имя  Возраст  Зарплата\n",
            "0   Анна       25     50000\n",
            "1   Петр       32     60000\n",
            "2  Мария       28     45000\n",
            "3   Иван       22     55000\n",
            "\n",
            "\n",
            "Средняя зарплата среди сотрудников младше 30 лет: 50000.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ЗАДАНИЕ 7\n",
        "import pandas as pd\n",
        "\n",
        "# Создаем словарь с данными о видеокартах\n",
        "gpu_data = {\n",
        "    \"Товар\": [\"rtx 4060ti\", \"rtx 4060\", \"gtx 1650\"],\n",
        "    \"Количество\": [10, 15, 20],\n",
        "    \"Цена\": [50000, 40000, 25000]\n",
        "}\n",
        "\n",
        "# Создаем DataFrame на основе словаря\n",
        "df_gpu = pd.DataFrame(gpu_data)\n",
        "\n",
        "# Рассчитываем выручку для каждой видеокарты и добавляем ее в DataFrame\n",
        "df_gpu[\"Выручка\"] = df_gpu[\"Количество\"] * df_gpu[\"Цена\"]\n",
        "print(df_gpu)\n",
        "\n",
        "# Вычисляем общую выручку за все товары\n",
        "total_revenue = df_gpu[\"Выручка\"].sum()\n",
        "\n",
        "print(f\"Выручка за все товары: {total_revenue}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sbQ6bGW0osPb",
        "outputId": "2157fb28-6f31-43d4-97ff-8f0b6b513cb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        Товар  Количество   Цена  Выручка\n",
            "0  rtx 4060ti          10  50000   500000\n",
            "1    rtx 4060          15  40000   600000\n",
            "2    gtx 1650          20  25000   500000\n",
            "Выручка за все товары: 1600000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ЗАДАНИЕ 8\n",
        "import pandas as pd\n",
        "\n",
        "# Создаем словарь с данными о заказах\n",
        "order_data = {\n",
        "    \"Заказ\": [\"N-1533\", \"N-1844\", \"N-1515\", \"N-1675\", \"N-6943\", \"N-5511\", \"N-6944\"],\n",
        "    \"Дата\": [\"2023-01-25\", \"2023-02-20\", \"2023-01-10\", \"2023-03-15\", \"2023-05-03\", \"2023-02-10\", \"2023-05-04\"],\n",
        "    \"Сумма\": [15000, 30000, 22000, 17000, 19000, 27000, 25000]\n",
        "}\n",
        "\n",
        "# Создаем DataFrame на основе словаря\n",
        "df_order = pd.DataFrame(order_data)\n",
        "\n",
        "# Выводим информацию о заказах\n",
        "print(df_order)\n",
        "\n",
        "# Преобразуем столбец \"Дата\" в формат datetime\n",
        "df_order[\"Дата\"] = pd.to_datetime(df_order[\"Дата\"])\n",
        "\n",
        "# Создаем столбец \"Месяц\" на основе данных в столбце \"Дата\"\n",
        "df_order[\"Месяц\"] = df_order[\"Дата\"].dt.month\n",
        "\n",
        "# Вычисляем сумму заказов по месяцам\n",
        "sum_by_month = df_order.groupby(\"Месяц\")[\"Сумма\"].sum()\n",
        "\n",
        "print(sum_by_month)\n",
        "\n",
        "# Находим месяц с наибольшей суммой заказов\n",
        "max_sum_month = sum_by_month.idxmax()\n",
        "\n",
        "print(f\"\\n\\nМесяц с наибольшей суммой заказов: {max_sum_month}\")\n",
        "\n",
        "# Выводим исходный DataFrame\n",
        "df_order\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "kaXm73CDpOaZ",
        "outputId": "dcd72988-2a7b-46f5-e6ba-dfebcf4ff93e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Заказ        Дата  Сумма\n",
            "0  N-1533  2023-01-25  15000\n",
            "1  N-1844  2023-02-20  30000\n",
            "2  N-1515  2023-01-10  22000\n",
            "3  N-1675  2023-03-15  17000\n",
            "4  N-6943  2023-05-03  19000\n",
            "5  N-5511  2023-02-10  27000\n",
            "6  N-6944  2023-05-04  25000\n",
            "Месяц\n",
            "1    37000\n",
            "2    57000\n",
            "3    17000\n",
            "5    44000\n",
            "Name: Сумма, dtype: int64\n",
            "\n",
            "\n",
            "Месяц с наибольшей суммой заказов: 2\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Заказ       Дата  Сумма  Месяц\n",
              "0  N-1533 2023-01-25  15000      1\n",
              "1  N-1844 2023-02-20  30000      2\n",
              "2  N-1515 2023-01-10  22000      1\n",
              "3  N-1675 2023-03-15  17000      3\n",
              "4  N-6943 2023-05-03  19000      5\n",
              "5  N-5511 2023-02-10  27000      2\n",
              "6  N-6944 2023-05-04  25000      5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88f2215d-88ae-42ca-bd7d-3a63b838e304\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Заказ</th>\n",
              "      <th>Дата</th>\n",
              "      <th>Сумма</th>\n",
              "      <th>Месяц</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>N-1533</td>\n",
              "      <td>2023-01-25</td>\n",
              "      <td>15000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>N-1844</td>\n",
              "      <td>2023-02-20</td>\n",
              "      <td>30000</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>N-1515</td>\n",
              "      <td>2023-01-10</td>\n",
              "      <td>22000</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>N-1675</td>\n",
              "      <td>2023-03-15</td>\n",
              "      <td>17000</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>N-6943</td>\n",
              "      <td>2023-05-03</td>\n",
              "      <td>19000</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>N-5511</td>\n",
              "      <td>2023-02-10</td>\n",
              "      <td>27000</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>N-6944</td>\n",
              "      <td>2023-05-04</td>\n",
              "      <td>25000</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88f2215d-88ae-42ca-bd7d-3a63b838e304')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-88f2215d-88ae-42ca-bd7d-3a63b838e304 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-88f2215d-88ae-42ca-bd7d-3a63b838e304');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f03918a5-ac21-47d6-a28c-1f7f4765cae4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f03918a5-ac21-47d6-a28c-1f7f4765cae4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f03918a5-ac21-47d6-a28c-1f7f4765cae4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ЗАДАНИЕ 9\n",
        "import pandas as pd\n",
        "\n",
        "# Создаем словарь с данными о продажах в магазинах\n",
        "market_data = {\n",
        "    \"Магазин\": [\"A\", \"B\", \"C\", \"A\", \"B\", \"C\", \"A\", \"B\", \"C\"],\n",
        "    \"День\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n",
        "    \"Продажи\": [20000, 15000, None, 25000, 30000, 22000, 18000, None, 28000]\n",
        "}\n",
        "\n",
        "# Создаем DataFrame на основе словаря\n",
        "df_market = pd.DataFrame(market_data)\n",
        "print(df_market)\n",
        "\n",
        "# Заменяем значения NaN в столбце \"Продажи\" на 0\n",
        "df_market[\"Продажи\"] = df_market[\"Продажи\"].fillna(0)\n",
        "\n",
        "# Вычисляем средний размер продаж по дням и магазинам\n",
        "avg_sale = df_market.groupby(['Магазин', 'День'])['Продажи'].mean().reset_index()\n",
        "\n",
        "print(f\"\\n\\nСредний размер продаж по дням и магазинам:\\n {avg_sale}\")\n",
        "\n",
        "# Вычисляем сумму продаж за все дни для каждого магазина\n",
        "sum_sale = df_market.groupby('Магазин')['Продажи'].sum()\n",
        "print(f\"\\n\\nСумма продаж за все дни для каждого магазина:\\n {sum_sale}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uMZ2J8fppPVR",
        "outputId": "f921ef01-144e-4b54-921b-fd3196f20229"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Магазин  День  Продажи\n",
            "0       A     1  20000.0\n",
            "1       B     1  15000.0\n",
            "2       C     1      NaN\n",
            "3       A     2  25000.0\n",
            "4       B     2  30000.0\n",
            "5       C     2  22000.0\n",
            "6       A     3  18000.0\n",
            "7       B     3      NaN\n",
            "8       C     3  28000.0\n",
            "\n",
            "\n",
            "Средний размер продаж по дням и магазинам:\n",
            "   Магазин  День  Продажи\n",
            "0       A     1  20000.0\n",
            "1       A     2  25000.0\n",
            "2       A     3  18000.0\n",
            "3       B     1  15000.0\n",
            "4       B     2  30000.0\n",
            "5       B     3      0.0\n",
            "6       C     1      0.0\n",
            "7       C     2  22000.0\n",
            "8       C     3  28000.0\n",
            "\n",
            "\n",
            "Сумма продаж за все дни для каждого магазина:\n",
            " Магазин\n",
            "A    63000.0\n",
            "B    45000.0\n",
            "C    50000.0\n",
            "Name: Продажи, dtype: float64\n"
          ]
        }
      ]
    }
  ]
}
